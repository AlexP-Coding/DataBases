Para os join ser rapidos tb convem q foreign keys tenham indice
n é preciso fazer create index pq sao primary keys na tabela onde existem
(sublinhar as duas, fazer unique)
heroku

dfs com AC3

1. BD:

1.1 ESQUEMA:
- criar esquema de BD para o esquema relacioal do anexo A
- é preciso especificar restriçoes em casa campo, tabela e linha
(com NOT NULL, CHECK, PRIMARY KEY, UNIQUE e FOREIGN KEY)

1.2 CARREGAMENTO:
- criar instruções p preecher BD acima de forma consistente
- consultas abaixo NÃO podem ter resultado vazio
- usar script SQL/folha excel/python


2. RI:
- Usar extensões procedimentais SQL (Stored Procedures, Triggers) EM 1.1
para representar isto
- (RI-1) Uma Categoria não pode estar contida em si própria
- (RI-4) O número de unidades repostas num Evento de Reposição não pode exceder o número de 
unidades especificado no Planograma
- (RI-5) Um Produto só pode ser reposto numa Prateleira que apresente (pelo menos) uma das 
Categorias desse produto
- ON DELETE CASCADE, ON UPDATE CASCADE, NÃO se pode usar
- Usar outras cenas que não Stores Procedures, Triggers para o resto das RI


3. SQL:
- Consulta SQL mais sucinta (aka) para cada situação:
- Qual/Quais os nomes dos retalhistas responsáveis pela reposição do maior nr
de categorias?
- Qual o ean dos produtos q nunca foram repostos
- Quais os produtos sempre repostos pelo mm retalhista?
- (Não pode usar instruções SQL que não fazem parte do SQL standard 
(como por exemplo a instrução LIMIT).) 


4. Vistas:
- Evento de reposição representa saída de stock de uma qtd de produto sob forma de
vendas, desperdícios e roubos
- Supondo que não há desperdícios nem roubos, cria vista que resume 
o info mais importante sobre as vendas, combinando o findo de diferentes tabelas

4.1 Esquema:
- Vendas (ean, cat, ano, trimestre, dia_mes, dia_semana, distrito, concelho, unidades)
- unidades: corresponde ao atributo com o mesmo nome da relação evento_reposicao
- ean e cat: correspondem às chaves primárias das relações produto e categoria, respectivamente
- distrito e concelho: correspondem aos atributos com o mesmo nome de ponto_de_retalho
- ano, trimestre, mes e dia_semana: atributos derivados do atributo instante
- (Pode utilizar a função extract() do POSTGRES 
https://www.postgresqltutorial.com/postgresql-date-functions/postgresql-extract/
para obter anos, trimestres, dias da semana, etc a partir de "timesptamps".)


5. App:
- Cria protótipo de app web em scripts Python CGI e páginas HTML que permita:
 - Inserir e remover categorias e sub-categorias;
 - Inserir e remover um retalhista, com todos os seus produtos, garantindo que esta operação seja
atómica;
 - Listar todos os eventos de reposição de uma IVM, apresentando o número de unidades repostas por 
categoria de produto;
 - Listar todas as sub-categorias de uma super-categoria, a todos os níveis de profundidade.
- (A solução deve prezar pela segurança, prevenindo ataques por SQL INJECTION)
- (A atomicidade das operações sobre a base de dados deve estar assegurada)
- (Pode-se utilizar CSS)


6. Consultas OLAP:
- Usando a vista EM 4., escreve duas consultas SQL para analisar o total
de artigos vendidos:
 - num dado período (i.e. entre duas datas), por dia da semana, por concelho
 e no total
 - num dado distrito (i.e. “Lisboa”), por concelho, categoria, dia da semana 
 e no total
- (A solução submetida deve usar as instruções ROLLUP, CUBE, GROUPING SETS,
ou as cláusulas UNION of GROUP BY)


7. Índices:
- Cria as instruções de criação do(s) índice(s) SQL para melhorar 
os tempos de consulta para cada um dos casos EM 7.x
- Explica quais as operações otimizadas e como
- Indica:
 - que tipo de índices
 - sobre quais atributos
 - sobre quais tabelas
...faz sentido criar
- (Suponha que o tamanho das tabelas exceda a memória disponível 
em várias ordens de magnitude)
- (Suponha que não existam índices nas tabelas, 
além daqueles implícitos ao declarar chaves primárias e estrangeiras)

7.1
SELECT DISTINCT R.nome
FROM retalhista R, responsavel_por P 
WHERE R.tin = P.tin and P. nome_cat = 'Frutos'

7.2
SELECT T.nome, count(T.ean)
FROM produto P, tem_categoria T
WHERE p.cat = T.nome and P.desc like ‘A%’ 
GROUP BY T.nome

